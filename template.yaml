AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ghl-chat

Resources:
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:InvokeFunction
                  - dynamodb:*
                Resource: '*'
  ApiRole:
    Type: AWS::IAM::Role # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#cfn-iam-role-managedpolicyarns
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  WebhooksHttpApi: 
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Prod
      AccessLogSettings: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-stage-accesslogsetting.html
        # DestinationArn: arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-permissions
        DestinationArn: !GetAtt ApiLogGroup.Arn
        # DestinationArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/api-gateway/${WebhooksApi}/access-log"
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'

  # WebhooksApi: # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html?icmpid=apigateway_console_help
  #   Type: AWS::Serverless::Api
  #   Properties:
  #     StageName: Prod
  #     # Role: !GetAtt ApiRole.Arn
  #     MethodSettings:
  #       - ResourcePath: /cicd_ghl_webhook
  #         HttpMethod: ANY
  #     AccessLogSetting: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-stage-accesslogsetting.html
  #       # DestinationArn: arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-permissions
  #       # DestinationArn: !GetAtt ApiLogGroup.Arn
  #       # DestinationArn: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/api-gateway/${WebhooksApi}/access-log"
  #       Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
  ApiLogGroup:
    Type: AWS::Logs::LogGroup # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref WebhooksHttpApi
        # - - !Ref WebhooksApi
          - access-logs
  # WebhooksApiDeployment:
  #   Type: AWS::ApiGateway::Deployment
  #   Properties:
  #     RestApiId: !Ref WebhooksApi
      # AccessLogSetting:
      #   Format: "$context.requestId $context.identity.sourceIp $context.authorizer.principalId $context.requestTime $context.responseLength $context.status"

  # WebhooksApiStage: # https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html?icmpid=apigateway_console_help
  #   Type: AWS::ApiGateway::Stage
  #   Properties:
  #     StageName: Prod
  #     RestApiId: !Ref WebhooksApi
  #     DeploymentId: !Ref WebhooksApiDeployment
  

  LambdaLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      LayerName: GhlChatLayer
      Description: Dependencies installed 2023-12-17
      ContentUri: s3://ownitfit-silvhua/layers/ghl_chat_packages.zip
  
  WebhooksLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ghl_chat_history_lambda.lambda_handler
      Runtime: python3.11
      CodeUri: src
      Timeout: 300
      Role: !GetAtt LambdaFunctionRole.Arn
      Layers: 
        - arn:aws:lambda:us-west-2:661497771663:layer:requests_langchain:1
        # - Ref: LambdaLayer
        
      Events: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-eventsource.html
        WebhooksApiEvent:
          Type: HttpApi
          # Type: Api
          Properties:
            Path: /cicd_ghl_webhook
            # Path: /ghl_webhook
            Method: ANY
            # ApiId: ${{ secrets.HTTP_API_ID }}
            # RestApiId:
            ApiId:
              Ref: WebhooksHttpApi
              # Ref: WebhooksApi

  ReplyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ghl_reply_lambda.lambda_handler
      Runtime: python3.11
      CodeUri: src
      Timeout: 300
      Role: !GetAtt LambdaFunctionRole.Arn
      Layers: 
        - arn:aws:lambda:us-west-2:661497771663:layer:GhlChatLayer:9
        # - arn:aws:lambda:us-west-2:661497771663:layer:requests_langchain:1

  FollowupLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ghl_followup_lambda.lambda_handler
      Runtime: python3.11
      CodeUri: src
      Timeout: 300
      Role: !GetAtt LambdaFunctionRole.Arn
      Layers: 
        - arn:aws:lambda:us-west-2:661497771663:layer:GhlChatLayer:9
        
      # Events: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-eventsource.html#sam-property-function-eventsource-properties
      #   WebhooksLambdaEvent:
      #     Type: Lambda
      #     Properties:
      #       FunctionName: !Ref WebhooksLambda

  # OifBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: ownitfit-silvhua

  # SessionTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     TableName: SessionTable
  #     AttributeDefinitions:
  #       - AttributeName: SessionId
  #         AttributeType: S
  #       - AttributeName: type  
  #         AttributeType: S
  #     KeySchema:
  #       - AttributeName: SessionId
  #         KeyType: HASH
  #       - AttributeName: type  
  #         KeyType: RANGE
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 1
  #       WriteCapacityUnits: 1

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # WebhooksApi:
  #   Description: "API Gateway endpoint URL for WebhooksLambda"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/cicd_ghl_webhook/"
  #   # Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/ghl_webhook/"
  WebhooksLambdaFunction:
    Description: "WebhooksLambda ARN"
    Value: !GetAtt WebhooksLambda.Arn
  ReplyLambdaFunction:
    Description: "ReplyLambda ARN"
    Value: !GetAtt ReplyLambda.Arn
  LambdaIamRole:
    Description: "Implicit IAM Role created for Lambda"
    Value: !GetAtt LambdaFunctionRole.Arn
  ApiRoleIamRole:
    Description: "Implicit IAM Role created for API"
    Value: !GetAtt ApiRole.Arn